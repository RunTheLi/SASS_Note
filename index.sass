/* SASS CheatSheet */

/* $text-color and set it to red. Then change the value of the color property for the .blog-post and h2 to the $text-color variable */
$text-color: red;

.blog-post,
h2 {
  color: $text-color;
}


/* In Sass, a mixin is a group of CSS declarations that can be reused throughout the style sheet.
 The definition starts with the @mixin at-rule, followed by a custom name. You apply the mixin using the @include at-rule.*/
 
/* Write a mixin named shape and give it 3 parameters: $w, $h, and $bg-color */

<style type='text/scss'>
@mixin shape($w, $h, $bg-color){
  width: $w;
  height: $h;
  background-color: $bg-color;
}
#square {
  @include shape(50px, 50px, red);
}

#rect-a {
  @include shape(100px, 50px, blue);
}

#rect-b {
  @include shape(50px, 100px, orange);
}
</style>

<div id="square"></div>
<div id="rect-a"></div>
<div id="rect-b"></div>


/* The @if directive in Sass is useful to test for a specific case - it works just like the if statement in JavaScript. */
/* if if else */

<style type='text/scss'>
  @mixin border-stroke($val) {
  @if $val == light {
    border: 1px solid black;
  }
  @else if $val == medium {
    border: 3px solid black;
  }
  @else if $val == heavy {
    border: 6px solid black;
  }
  @else {
    border: none;
  }
}


/* The @for directive adds styles in a loop, very similar to a for loop in JavaScript */

<style type='text/scss'>

@for $j from 1 through 6 {
  .text-#{$j} { font-size: 15px * $j; }
}

</style>